name: Fast Deploy to Azure App Service

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            server/package-lock.json
            client/package-lock.json

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci

      - name: Build React app
        run: |
          cd client
          # Set environment variables for production build
          export REACT_APP_BACKEND_URL="https://xyz-wallet-v1-adh3bjdnguczdmft.westus-01.azurewebsites.net"
          export REACT_APP_STELLAR_NETWORK="testnet"
          export REACT_APP_STELLAR_HORIZON_URL="https://horizon-testnet.stellar.org"
          export REACT_APP_MAPBOX_TOKEN="pk.eyJ1Ijoic2VyZ2UzNjl4MzMiLCJhIjoiY20zZHkzb2xoMDA0eTJxcHU4MTNoYjNlaCJ9.Xl6OxzF9td1IgTTeUp526w"
          npm run build
        env:
          CI: false
          GENERATE_SOURCEMAP: false

      - name: Create deployment package
        run: |
          # Create deployment directory
          mkdir -p deploy-package/server
          mkdir -p deploy-package/client/build
          
          # Copy only essential server files (no node_modules)
          cp server/index.js deploy-package/server/
          cp server/package.json deploy-package/server/
          cp server/package-lock.json deploy-package/server/
          cp -r server/routes deploy-package/server/
          cp package.json deploy-package/
          cp package-lock.json deploy-package/
          cp startup.txt deploy-package/
          
          # Copy client build
          cp -r client/build/* deploy-package/client/build/
          
          # Pre-install server dependencies to speed up deployment
          echo "Pre-installing server dependencies..."
          cd deploy-package/server
          npm ci --production --silent
          cd ../..
          
          # Remove unnecessary files to minimize package size
          echo "Cleaning up unnecessary files..."
          find deploy-package -name "*.md" -delete 2>/dev/null || true
          find deploy-package -name "*.txt" -not -name "startup.txt" -delete 2>/dev/null || true
          find deploy-package -name ".git*" -delete 2>/dev/null || true
          # Clean up cache and temp files but skip problematic directories
          find deploy-package -name "node_modules/.cache" -type d -exec rm -rf {} + 2>/dev/null || true
          echo "Cleanup completed"
          
          # Create package.json for the root with correct start script
          cat > deploy-package/package.json << 'EOF'
          {
            "name": "xyz-wallet-v1",
            "version": "1.0.0",
            "main": "server/index.js",
            "scripts": {
              "start": "cd server && node index.js"
            },
            "dependencies": {
              "express": "^4.18.2",
              "cors": "^2.8.5",
              "helmet": "^7.1.0",
              "dotenv": "^16.3.1",
              "axios": "^1.6.2",
              "stellar-sdk": "^11.2.2",
              "node-fetch": "^3.3.2",
              "express-rate-limit": "^7.1.5",
              "morgan": "^1.10.0"
            }
          }
          EOF
          
          # Create deployment zip with maximum compression
          cd deploy-package
          echo "Creating deployment package..."
          echo "Contents before zipping:"
          ls -la
          zip -r -9 ../deployment.zip . -x "*.git*" "*.log" "*.md" "*.txt" "node_modules/.cache/*"
          cd ..
          
          echo "Deployment package created:"
          ls -la deployment.zip
          echo "Size: $(du -h deployment.zip | cut -f1)"
          echo "File count: $(unzip -l deployment.zip | wc -l)"
          echo "Package contents:"
          unzip -l deployment.zip | head -20
          echo "Largest files in package:"
          unzip -l deployment.zip | sort -k1 -nr | head -10
          
          # Verify deployment.zip exists
          if [ ! -f "deployment.zip" ]; then
            echo "❌ ERROR: deployment.zip was not created!"
            exit 1
          fi
          echo "✅ deployment.zip created successfully"

      - name: Wait for any existing deployments to complete
        run: sleep 10

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'xyz-wallet-v1'
          package: deployment.zip
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
        continue-on-error: true
        env:
          NODE_ENV: production
          SOROSWAP_API_KEY: ${{ secrets.SOROSWAP_API_KEY }}
          SOROSWAP_API_URL: https://api.soroswap.finance
          STELLAR_NETWORK: testnet
          STELLAR_HORIZON_URL: https://horizon-testnet.stellar.org

      - name: Retry deployment if failed
        if: failure()
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'xyz-wallet-v1'
          package: deployment.zip
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
        env:
          NODE_ENV: production
          SOROSWAP_API_KEY: ${{ secrets.SOROSWAP_API_KEY }}
          SOROSWAP_API_URL: https://api.soroswap.finance
          STELLAR_NETWORK: testnet
          STELLAR_HORIZON_URL: https://horizon-testnet.stellar.org

      - name: Verify deployment
        run: |
          echo "✅ Fast deployment completed!"
          echo "🌐 App URL: https://xyz-wallet-v1-adh3bjdnguczdmft.westus-01.azurewebsites.net"
