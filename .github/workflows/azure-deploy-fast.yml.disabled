name: Fast Deploy to Azure App Service

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            server/package-lock.json
            client/package-lock.json

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci

      - name: Build React app
        run: |
          cd client
          # Set environment variables for production build
          export REACT_APP_BACKEND_URL="https://xyz-wallet-v1-adh3bjdnguczdmft.westus-01.azurewebsites.net"
          export REACT_APP_STELLAR_NETWORK="testnet"
          export REACT_APP_STELLAR_HORIZON_URL="https://horizon-testnet.stellar.org"
          export REACT_APP_MAPBOX_TOKEN="pk.eyJ1Ijoic2VyZ2UzNjl4MzMiLCJhIjoiY20zZHkzb2xoMDA0eTJxcHU4MTNoYjNlaCJ9.Xl6OxzF9td1IgTTeUp526w"
          # GeoLink Integration Environment Variables
          export REACT_APP_GEOLINK_BASE_URL="https://geolink-buavavc6gse5c9fw.westus-01.azurewebsites.net"
          export REACT_APP_GEOLINK_WALLET_PROVIDER_KEY="ca56b11b4d40523995c101c06a929087e7e55f2811b8e698ddf5a0a7c8177d29"
          export REACT_APP_GEOLINK_DATA_CONSUMER_KEY="8d6aaf5ce265afed4debbf97252ac4a5beb0853c63573d555617865a413af050"
          # Force cache bust with version
          export REACT_APP_VERSION="$(date +%s)"
          
          # Debug: Show environment variables being used
          echo "üîß Environment variables for build:"
          echo "REACT_APP_GEOLINK_BASE_URL: $REACT_APP_GEOLINK_BASE_URL"
          echo "REACT_APP_GEOLINK_WALLET_PROVIDER_KEY: $REACT_APP_GEOLINK_WALLET_PROVIDER_KEY"
          echo "REACT_APP_GEOLINK_DATA_CONSUMER_KEY: $REACT_APP_GEOLINK_DATA_CONSUMER_KEY"
          echo "REACT_APP_VERSION: $REACT_APP_VERSION"
          
          npm run build
        env:
          CI: false
          GENERATE_SOURCEMAP: false

      - name: Create deployment package
        run: |
          echo "üöÄ Starting deployment package creation..."
          echo "Current working directory: $(pwd)"
          echo "Available files:"
          ls -la
          
          # Ensure we're in the right directory
          if [ ! -f "package.json" ] || [ ! -d "server" ] || [ ! -d "client" ]; then
            echo "‚ùå Not in the correct directory!"
            echo "Expected files/directories: package.json, server/, client/"
            exit 1
          fi
          
          # Create deployment directory structure
          echo "üìÅ Creating deployment directory structure..."
          mkdir -p deploy-package/server
          mkdir -p deploy-package/client/build
          
          # Copy server files
          echo "üìã Copying server files..."
          cp server/index.js deploy-package/server/
          cp server/package.json deploy-package/server/
          cp server/package-lock.json deploy-package/server/
          cp -r server/routes deploy-package/server/
          
          # Copy root package files
          cp package.json deploy-package/
          cp package-lock.json deploy-package/
          
          # Copy client build files
          echo "üìã Copying client build files..."
          if [ -d "client/build" ]; then
            cp -r client/build/* deploy-package/client/build/
            echo "‚úÖ Client build files copied"
          else
            echo "‚ùå Client build directory not found!"
            exit 1
          fi
          
          # Pre-install server dependencies
          echo "üì¶ Pre-installing server dependencies..."
          cd deploy-package/server
          npm ci --production --silent || {
            echo "‚ùå Failed to install server dependencies"
            exit 1
          }
          cd ../..
          
          # Create root package.json for Azure
          echo "üìù Creating root package.json..."
          cat > deploy-package/package.json << 'EOF'
          {
            "name": "xyz-wallet-v1",
            "version": "1.0.0",
            "main": "server/index.js",
            "scripts": {
              "start": "cd server && node index.js"
            },
            "dependencies": {
              "express": "^4.18.2",
              "cors": "^2.8.5",
              "helmet": "^7.1.0",
              "dotenv": "^16.3.1",
              "axios": "^1.6.2",
              "stellar-sdk": "^11.2.2",
              "node-fetch": "^3.3.2",
              "express-rate-limit": "^7.1.5",
              "morgan": "^1.10.0"
            }
          }
          EOF
          
          # Verify deployment structure
          echo "üîç Verifying deployment structure..."
          echo "Deploy package contents:"
          find deploy-package -type f | head -20
          echo "Deploy package size:"
          du -sh deploy-package
          
          # Create zip file
          echo "üì¶ Creating deployment.zip..."
          cd deploy-package
          echo "Current directory: $(pwd)"
          echo "Files to zip:"
          ls -la
          
          # Try zip first
          if command -v zip >/dev/null 2>&1; then
            echo "Using zip command..."
            zip -r ../deployment.zip . -x "*.git*" "*.log" "*.md" "*.txt" "node_modules/.cache/*" || {
              echo "‚ùå Zip command failed"
              exit 1
            }
          else
            echo "Zip not available, using tar..."
            tar -czf ../deployment.tar.gz . --exclude="*.git*" --exclude="*.log" --exclude="*.md" --exclude="*.txt" --exclude="node_modules/.cache/*" || {
              echo "‚ùå Tar command failed"
              exit 1
            }
            mv ../deployment.tar.gz ../deployment.zip
          fi
          
          cd ..
          
          # Verify zip file was created
          echo "üîç Verifying deployment.zip..."
          if [ -f "deployment.zip" ]; then
            echo "‚úÖ deployment.zip created successfully"
            echo "File size: $(du -h deployment.zip | cut -f1)"
            echo "File type: $(file deployment.zip)"
            echo "Zip contents preview:"
            unzip -l deployment.zip | head -10
          else
            echo "‚ùå deployment.zip was not created!"
            echo "Available files:"
            ls -la
            exit 1
          fi

      - name: Wait for any existing deployments to complete
        run: sleep 10

      - name: Set Azure App Service environment variables
        run: |
          echo "Setting environment variables in Azure App Service..."
          # Note: Environment variables should be set directly in Azure Portal
          # or via Azure CLI with proper authentication
          echo "Environment variables should be configured in Azure Portal"
        continue-on-error: true

      - name: Verify deployment package
        run: |
          echo "üîç Final verification before deployment..."
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          
          if [ -f "deployment.zip" ]; then
            echo "‚úÖ deployment.zip found"
            echo "File size: $(du -h deployment.zip | cut -f1)"
            echo "File permissions: $(ls -la deployment.zip)"
            echo "File type: $(file deployment.zip)"
            echo "Zip file is valid: $(unzip -t deployment.zip >/dev/null 2>&1 && echo "Yes" || echo "No")"
          else
            echo "‚ùå deployment.zip not found!"
            echo "Looking for any zip files:"
            find . -name "*.zip" -type f
            echo "Looking for any deployment files:"
            find . -name "*deployment*" -type f
            exit 1
          fi

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'xyz-wallet-v1'
          package: deployment.zip
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}

      - name: Retry deployment if failed
        if: failure()
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'xyz-wallet-v1'
          package: deployment.zip
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}

      - name: Verify deployment
        run: |
          echo "‚úÖ Fast deployment completed!"
          echo "üåê App URL: https://xyz-wallet-v1-adh3bjdnguczdmft.westus-01.azurewebsites.net"
